// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: v1/rpc.proto

package fspb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FuseService_PrepareImage_FullMethodName = "/baepo.viscaufs.fs.v1.FuseService/PrepareImage"
	FuseService_ImageReady_FullMethodName   = "/baepo.viscaufs.fs.v1.FuseService/ImageReady"
	FuseService_GetAttr_FullMethodName      = "/baepo.viscaufs.fs.v1.FuseService/GetAttr"
	FuseService_ReadDir_FullMethodName      = "/baepo.viscaufs.fs.v1.FuseService/ReadDir"
	FuseService_Open_FullMethodName         = "/baepo.viscaufs.fs.v1.FuseService/Open"
	FuseService_Read_FullMethodName         = "/baepo.viscaufs.fs.v1.FuseService/Read"
	FuseService_Release_FullMethodName      = "/baepo.viscaufs.fs.v1.FuseService/Release"
)

// FuseServiceClient is the client API for FuseService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FuseServiceClient interface {
	// PrepareImage prepares a container image for use with the FUSE filesystem
	PrepareImage(ctx context.Context, in *PrepareImageRequest, opts ...grpc.CallOption) (*PrepareImageResponse, error)
	// ImageReady indicates that the image is ready for use
	ImageReady(ctx context.Context, in *ImageReadyRequest, opts ...grpc.CallOption) (*ImageReadyResponse, error)
	// GetAttr gets the attributes of a file or directory
	GetAttr(ctx context.Context, in *GetAttrRequest, opts ...grpc.CallOption) (*GetAttrResponse, error)
	// ReadDir reads a directory's contents
	ReadDir(ctx context.Context, in *ReadDirRequest, opts ...grpc.CallOption) (*ReadDirResponse, error)
	// Open opens a file for reading
	Open(ctx context.Context, in *OpenRequest, opts ...grpc.CallOption) (*OpenResponse, error)
	// Read reads data from an open file
	Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*ReadResponse, error)
	Release(ctx context.Context, in *ReleaseRequest, opts ...grpc.CallOption) (*ReleaseResponse, error)
}

type fuseServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFuseServiceClient(cc grpc.ClientConnInterface) FuseServiceClient {
	return &fuseServiceClient{cc}
}

func (c *fuseServiceClient) PrepareImage(ctx context.Context, in *PrepareImageRequest, opts ...grpc.CallOption) (*PrepareImageResponse, error) {
	out := new(PrepareImageResponse)
	err := c.cc.Invoke(ctx, FuseService_PrepareImage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fuseServiceClient) ImageReady(ctx context.Context, in *ImageReadyRequest, opts ...grpc.CallOption) (*ImageReadyResponse, error) {
	out := new(ImageReadyResponse)
	err := c.cc.Invoke(ctx, FuseService_ImageReady_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fuseServiceClient) GetAttr(ctx context.Context, in *GetAttrRequest, opts ...grpc.CallOption) (*GetAttrResponse, error) {
	out := new(GetAttrResponse)
	err := c.cc.Invoke(ctx, FuseService_GetAttr_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fuseServiceClient) ReadDir(ctx context.Context, in *ReadDirRequest, opts ...grpc.CallOption) (*ReadDirResponse, error) {
	out := new(ReadDirResponse)
	err := c.cc.Invoke(ctx, FuseService_ReadDir_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fuseServiceClient) Open(ctx context.Context, in *OpenRequest, opts ...grpc.CallOption) (*OpenResponse, error) {
	out := new(OpenResponse)
	err := c.cc.Invoke(ctx, FuseService_Open_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fuseServiceClient) Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*ReadResponse, error) {
	out := new(ReadResponse)
	err := c.cc.Invoke(ctx, FuseService_Read_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fuseServiceClient) Release(ctx context.Context, in *ReleaseRequest, opts ...grpc.CallOption) (*ReleaseResponse, error) {
	out := new(ReleaseResponse)
	err := c.cc.Invoke(ctx, FuseService_Release_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FuseServiceServer is the server API for FuseService service.
// All implementations must embed UnimplementedFuseServiceServer
// for forward compatibility
type FuseServiceServer interface {
	// PrepareImage prepares a container image for use with the FUSE filesystem
	PrepareImage(context.Context, *PrepareImageRequest) (*PrepareImageResponse, error)
	// ImageReady indicates that the image is ready for use
	ImageReady(context.Context, *ImageReadyRequest) (*ImageReadyResponse, error)
	// GetAttr gets the attributes of a file or directory
	GetAttr(context.Context, *GetAttrRequest) (*GetAttrResponse, error)
	// ReadDir reads a directory's contents
	ReadDir(context.Context, *ReadDirRequest) (*ReadDirResponse, error)
	// Open opens a file for reading
	Open(context.Context, *OpenRequest) (*OpenResponse, error)
	// Read reads data from an open file
	Read(context.Context, *ReadRequest) (*ReadResponse, error)
	Release(context.Context, *ReleaseRequest) (*ReleaseResponse, error)
	mustEmbedUnimplementedFuseServiceServer()
}

// UnimplementedFuseServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFuseServiceServer struct {
}

func (UnimplementedFuseServiceServer) PrepareImage(context.Context, *PrepareImageRequest) (*PrepareImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrepareImage not implemented")
}
func (UnimplementedFuseServiceServer) ImageReady(context.Context, *ImageReadyRequest) (*ImageReadyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImageReady not implemented")
}
func (UnimplementedFuseServiceServer) GetAttr(context.Context, *GetAttrRequest) (*GetAttrResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAttr not implemented")
}
func (UnimplementedFuseServiceServer) ReadDir(context.Context, *ReadDirRequest) (*ReadDirResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadDir not implemented")
}
func (UnimplementedFuseServiceServer) Open(context.Context, *OpenRequest) (*OpenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Open not implemented")
}
func (UnimplementedFuseServiceServer) Read(context.Context, *ReadRequest) (*ReadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (UnimplementedFuseServiceServer) Release(context.Context, *ReleaseRequest) (*ReleaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Release not implemented")
}
func (UnimplementedFuseServiceServer) mustEmbedUnimplementedFuseServiceServer() {}

// UnsafeFuseServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FuseServiceServer will
// result in compilation errors.
type UnsafeFuseServiceServer interface {
	mustEmbedUnimplementedFuseServiceServer()
}

func RegisterFuseServiceServer(s grpc.ServiceRegistrar, srv FuseServiceServer) {
	s.RegisterService(&FuseService_ServiceDesc, srv)
}

func _FuseService_PrepareImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrepareImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FuseServiceServer).PrepareImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FuseService_PrepareImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FuseServiceServer).PrepareImage(ctx, req.(*PrepareImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FuseService_ImageReady_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImageReadyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FuseServiceServer).ImageReady(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FuseService_ImageReady_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FuseServiceServer).ImageReady(ctx, req.(*ImageReadyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FuseService_GetAttr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAttrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FuseServiceServer).GetAttr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FuseService_GetAttr_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FuseServiceServer).GetAttr(ctx, req.(*GetAttrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FuseService_ReadDir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadDirRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FuseServiceServer).ReadDir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FuseService_ReadDir_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FuseServiceServer).ReadDir(ctx, req.(*ReadDirRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FuseService_Open_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FuseServiceServer).Open(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FuseService_Open_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FuseServiceServer).Open(ctx, req.(*OpenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FuseService_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FuseServiceServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FuseService_Read_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FuseServiceServer).Read(ctx, req.(*ReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FuseService_Release_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FuseServiceServer).Release(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FuseService_Release_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FuseServiceServer).Release(ctx, req.(*ReleaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FuseService_ServiceDesc is the grpc.ServiceDesc for FuseService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FuseService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "baepo.viscaufs.fs.v1.FuseService",
	HandlerType: (*FuseServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PrepareImage",
			Handler:    _FuseService_PrepareImage_Handler,
		},
		{
			MethodName: "ImageReady",
			Handler:    _FuseService_ImageReady_Handler,
		},
		{
			MethodName: "GetAttr",
			Handler:    _FuseService_GetAttr_Handler,
		},
		{
			MethodName: "ReadDir",
			Handler:    _FuseService_ReadDir_Handler,
		},
		{
			MethodName: "Open",
			Handler:    _FuseService_Open_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _FuseService_Read_Handler,
		},
		{
			MethodName: "Release",
			Handler:    _FuseService_Release_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/rpc.proto",
}
